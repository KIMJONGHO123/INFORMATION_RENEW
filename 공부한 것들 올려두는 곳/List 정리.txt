// import java.util.*;
// class Solution {
//     public String[] solution(String[] strArr) {
//         List<String> answer = new ArrayList<>();
//         for(int i=0; i<strArr.length; i++){
//             int check=0;
//             for(int j=0; j<strArr[i].length() -1; j++){
//                 if(strArr[i].charAt(j) == 'a' && strArr[i].charAt(j+1) == 'd'){
//                     check =1;
//                     break;
//                 }
                
//             }
//             if(check==0){
//                 answer.add(strArr[i]);
                
//             }
//         }
        
        
//         return answer.toArray(new String[0]);
//     }
// }


// import java.util.*;
// class Solution {
//     public List solution(String[] strArr) {
//         List<String> answer = new ArrayList<>();
//         for(int i=0; i<strArr.length; i++){
//             int check=0;
//             for(int j=0; j<strArr[i].length() -1; j++){
//                 if(strArr[i].charAt(j) == 'a' && strArr[i].charAt(j+1) == 'd'){
//                     check =1;
//                     break;
//                 }
                
//             }
//             if(check==0){
//                 answer.add(strArr[i]);
                
//             }
//         }
        
        
//         return answer;
//     }
// }

// List<String> answer = new ArrayList<>(); 와 ArrayList<String> answer = new ArrayList<>(); 의 차이

// List~~~의 List는 ArrayList 를 포함한 여러 구현체의 상위 인터페이스이다. 따라서 이 방법이 ArrayList로 선언하는 것 보다 더 추상화된 형태로 더 유연한 코드를 작성할 수 있게 한다.

//     List
// :   ArrayList -> 배열로 이루어진 List
//     LinkedList
    
// List는 컬렉션 인터페이스 중 하나이다.
// 리스트는 크기 조절이 가능하다.
// 리스트는 초기 크기를 지정하지 않아도 된다.
// 리스트에 삭제는 공간을 지우는 것이다.

    
// 리스트 주요 기능
// 1. 삽입: List.add(값);
// 2. 중간 삽입 : List.add(index,value); index : 중간에 넣을 인덱스 , value : 중간에 넣을 값
// ## 중간에 값을 넣을 경우 중간에 넣은 값 이후에 값들은 한 칸씩 뒤로 밀리게 된다.
// 3. 삭제 : List.remove(index); 인덱스 위치에 있는 값을 삭제한다
// 4. 전체 삭제 : List.clear(); 모든 요소를 삭제
// 5. 출력 : List.get(index); 인덱스 위치에 있는 값을 출력
// 6. 사이즈 : List.size(); 리스트에 크기를 알 수 있다.
// 7. 수정 : List.get(); 리스트에 저장된 값을 인덱스 번호로 찾아가서 수정할 때 사용한다.

// // 문자열에서 사용가능한 메서드 정리
// // 문자열배열에서는 인덱스로 배열 접근 가능하다.


    