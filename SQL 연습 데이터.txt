-- 기존 테이블 삭제
drop table buytbl;
drop table userTbl;

-- UserTbl 만들기
CREATE TABLE userTbl( -- 회원테이블
userID CHAR(8) NOT NULL PRIMARY KEY, -- 사용자아이디
name VARCHAR(10) NOT NULL, -- 이름
birthYear INT NOT NULL, -- 출생년도
addr NCHAR(2) NOT NULL, --지역(2글자만 입력, 경남,서울,경기..)
mobile1 CHAR(3), -- 휴대폰의 국번(011,016...)
mobile2 CHAR(8), -- 휴대폰의 나머지 전화번호
height SMALLINT, -- 키
mDate DATE --회원가입일
);

-- Buytbl 만들기
CREATE TABLE buyTbl( -- 회원 구매 테이블
num INT NOT NULL PRIMARY KEY, -- 순번(PK) 
userID CHAR(8) NOT NULL, --
prodName CHAR(15) NOT NULL, -- 물품명
groupName CHAR(15), -- 분류
price INT NOT NULL, -- 단가
amount SMALLINT NOT NULL, -- 수량
FOREIGN KEY (userID) REFERENCES userTbl(userID)
);

-- Usertbl 값삽입
INSERT INTO userTbl VALUES('LSG','이승기',1987,'서울','011','1111111',182,'2008-8-8');
INSERT INTO userTbl VALUES('KBS','김범수',1979,'경남','011','2222222',173,'2012-4-4');
INSERT INTO userTbl VALUES('KKH','김경호',1971,'전남','019','3333333',177,'2007-7-7');
INSERT INTO userTbl VALUES('JYP','조용필',1950,'경기','011','4444444',166,'2009-4-4');
INSERT INTO userTbl VALUES('SSK','성시경',1979,'서울',NULL,NULL,186,'2013-12-12');
INSERT INTO userTbl VALUES('LJB','임재범',1963,'서울','016','6666666',182,'2009-9-9');
INSERT INTO userTbl VALUES('YJS','윤종신',1969,'경남',NULL,NULL,170,'2005-5-5');
INSERT INTO userTbl VALUES('EJW','은지원',1972,'경북','011','8888888',174,'2014-3-3');
INSERT INTO userTbl VALUES('JKW','조관우',1965,'경기','018','9999999',172,'2010-10-10');
INSERT INTO userTbl VALUES('BBK','바비킴',1973,'서울','010','0000000',176,'2013-5-5');

select * from usertbl;

-- Buytbl 값 삽입

INSERT INTO buyTbl VALUES(1,'KBS','운동화',NULL,30,2);
INSERT INTO buyTbl VALUES(2,'KBS','노트북','전자',1000,1);
INSERT INTO buyTbl VALUES(3,'JYP','모니터','전자',200,1);
INSERT INTO buyTbl VALUES(4,'BBK','모니터','전자',200,5);
INSERT INTO buyTbl VALUES(5,'KBS','청바지','의류',50,3);
INSERT INTO buyTbl VALUES(6,'BBK','메모리','전자',80,10);
INSERT INTO buyTbl VALUES(7,'SSK','책','서적',15,5);
INSERT INTO buyTbl VALUES(8,'EJW','책','서적',15,2);
INSERT INTO buyTbl VALUES(9,'EJW','청바지','의류',50,1);
INSERT INTO buyTbl VALUES(10,'BBK','운동화',NULL,30,2);
INSERT INTO buyTbl VALUES(11,'EJW','책','서적',15,1);
INSERT INTO buyTbl VALUES(12,'BBK','운동화',NULL,30,2);

-- buytbl 확인
select * from buytbl;

-- 테이블 조회(모든 테이블 확인, all_tables 라는 System View 사용)
select * from all_tables;

-- 테이블 조회(유저가 생성한 테이블 확인, user_tables 라는 System View 사용)
select * from user_tables;






-----------------------------------------------------------------------------------------
GROUP BY문 문제
-----------------------------------------------------------------------------------------
GROUP BY 문
1 userTbl에서 지역(addr)별 사용자 수를 구하는 SQL문을 작성하시오.
2 buyTbl에서 사용자(userID)별 총 구매액을 구하는 SQL문을 작성하시오. 총 구매액은 가격(price)과 수량(amount)의 곱의 합으로 계산하시오.
3 buyTbl에서 제품 그룹(groupName)별 판매 수량의 합계를 구하는 SQL문을 작성하시오. NULL 값은 '미분류'로 표시하시오.
4 userTbl에서 출생년도(birthYear)별 평균 키(height)를 구하는 SQL문을 작성하시오.
5 buyTbl에서 제품명(prodName)별 구매 횟수와 총 구매액을 구하는 SQL문을 작성하시오. 결과는 구매 횟수가 많은 순으로 정렬하시오.
6 userTbl에서 mobile1(통신사)별 가입자 수를 구하되, NULL 값은 '미입력'으로 표시하는 SQL문을 작성하시오.
7 userTbl과 buyTbl을 조인하여 지역(addr)별 총 구매액을 구하는 SQL문을 작성하시오.
8 buyTbl에서 사용자별 구매한 제품의 종류 수를 구하는 SQL문을 작성하시오.
9 userTbl에서 가입 연도별(mDate의 연도 부분) 가입자 수를 구하는 SQL문을 작성하시오.
10 buyTbl과 userTbl을 조인하여 연령대별(10대, 20대, ...) 구매 총액을 계산하는 SQL문을 작성하시오. 연령은 2023년 기준으로 계산하시오.


-----------------------------------------------------------------------------------------
HAVING문 문제
-----------------------------------------------------------------------------------------
BUYTBL 에서 작업합니다
1buyTbl에서 총 구매액이 1,000 이상인 사용자(userID)만 조회하는 SQL문을 작성하시오.
2userTbl에서 가입자 수가 2명 이상인 지역(addr)만 조회하는 SQL문을 작성하시오.
3buyTbl에서 평균 구매액이 100 이상인 제품(prodName)만 조회하는 SQL문을 작성하시오.
4userTbl에서 평균 키가 175cm 이상인 출생년도를 조회하는 SQL문을 작성하시오.
5buyTbl에서 최소 2개 이상의 제품을 구매한 사용자(userID)를 조회하는 SQL문을 작성하시오.
6userTbl과 buyTbl을 조인하여 구매 총액이 200 이상인 지역(addr)만 조회하는 SQL문을 작성하시오.
7buyTbl에서 구매 횟수가 3회 이상이고 총 구매액이 500 이상인 사용자(userID)를 조회하는 SQL문을 작성하시오.
8userTbl에서 평균 키가 가장 큰 지역(addr)을 조회하는 SQL문을 작성하시오. (서브쿼리와 HAVING 사용)
9buyTbl에서 구매 금액의 평균값보다 더 많은 금액을 사용한 사용자(userID)를 조회하는 SQL문을 작성하시오. (서브쿼리와 HAVING 사용)
10userTbl과 buyTbl을 조인하여 같은 지역(addr)에 사는 사용자들 중 구매 총액이 지역별 평균 구매액보다 높은 사용자(userID)를 조회하는 SQL문을 작성하시오. (서브쿼리와 HAVING 사용)


-------------------------------------------------------------------------------------------
INNER JONI 예제
-------------------------------------------------------------------------------------------

-- ① 구매한 회원의 이름, 상품명, 가격, 수량 출력
SELECT u.name, b.prodName, b.price, b.amount
FROM userTbl u
JOIN buyTbl b ON u.userID = b.userID;

-- ② 회원별 총 구매 금액 출력
SELECT u.userID, u.name, SUM(b.price * b.amount) AS 총구매금액
FROM userTbl u
JOIN buyTbl b ON u.userID = b.userID
GROUP BY u.userID, u.name;

-- ③ 상품을 가장 많이 구매한 회원(수량 기준)
SELECT u.name, SUM(b.amount) AS 총수량
FROM userTbl u
JOIN buyTbl b ON u.userID = b.userID
GROUP BY u.name
ORDER BY 총수량 DESC
FETCH FIRST 1 ROWS ONLY;

-- ④ 특정 물품(책)을 구매한 회원 이름 조회
SELECT DISTINCT u.name
FROM userTbl u
JOIN buyTbl b ON u.userID = b.userID
WHERE b.prodName = '책';

-- ⑤ 지역별 회원의 총 구매 금액 집계
SELECT u.addr AS 지역, SUM(b.price * b.amount) AS 지역총구매액
FROM userTbl u
JOIN buyTbl b ON u.userID = b.userID
GROUP BY u.addr;

-- ⑥ 물품별로 구매한 회원 수
SELECT b.prodName, COUNT(DISTINCT u.userID) AS 구매회원수
FROM userTbl u
JOIN buyTbl b ON u.userID = b.userID
GROUP BY b.prodName;

-- ⑦ 회원별 평균 구매 단가 출력
SELECT u.name, ROUND(AVG(b.price), 2) AS 평균단가
FROM userTbl u
JOIN buyTbl b ON u.userID = b.userID
GROUP BY u.name;

-- ⑧ 회원 키가 175 이상인 사람들의 구매 물품 목록
SELECT u.name, b.prodName, b.price
FROM userTbl u
JOIN buyTbl b ON u.userID = b.userID
WHERE u.height >= 175;

-- ⑨ 2010년 이후 가입한 회원이 구매한 상품 내역
SELECT u.name, u.mDate, b.prodName, b.amount
FROM userTbl u
JOIN buyTbl b ON u.userID = b.userID
WHERE u.mDate >= TO_DATE('2010-01-01', 'YYYY-MM-DD');

-- ⑩ 물품 분류(groupName)별 총 매출액
SELECT b.groupName, SUM(b.price * b.amount) AS 총매출액
FROM buyTbl b
JOIN userTbl u ON b.userID = u.userID
GROUP BY b.groupName;

-------------------------------------------------------------------------------------------
LEFT OUTER JOIN 예제
-------------------------------------------------------------------------------------------
-- ① 모든 회원의 이름과 구매 내역(없는 경우 NULL로 표시)
SELECT u.name, b.prodName, b.price
FROM userTbl u
LEFT JOIN buyTbl b ON u.userID = b.userID;

-- ② 구매 이력이 없는 회원 조회
SELECT u.userID, u.name
FROM userTbl u
LEFT JOIN buyTbl b ON u.userID = b.userID
WHERE b.userID IS NULL;

-- ③ 회원별로 구매한 총 수량 (없는 경우 0으로 표시)
SELECT u.name, NVL(SUM(b.amount), 0) AS 총수량
FROM userTbl u
LEFT JOIN buyTbl b ON u.userID = b.userID
GROUP BY u.name;

-- ④ 지역별 회원 이름과 구매 물품명 출력 (구매가 없으면 NULL)
SELECT u.addr, u.name, b.prodName
FROM userTbl u
LEFT JOIN buyTbl b ON u.userID = b.userID;

-- ⑤ 키가 180 이상인 회원의 구매 내역 포함 출력 (구매 없을 시 NULL)
SELECT u.name, u.height, b.prodName
FROM userTbl u
LEFT JOIN buyTbl b ON u.userID = b.userID
WHERE u.height >= 180;


-------------------------------------------------------------------------------------------
RIGHT OUTER JOIN 데이터
-------------------------------------------------------------------------------------------
-- ① 구매 내역을 기준으로 회원 정보 조회
SELECT u.name, b.prodName, b.price
FROM userTbl u
RIGHT JOIN buyTbl b ON u.userID = b.userID;

-- ② 회원 정보가 없는 구매 내역 찾기 (이상 상황 확인용)
SELECT b.prodName, b.price
FROM userTbl u
RIGHT JOIN buyTbl b ON u.userID = b.userID
WHERE u.userID IS NULL;

-- ③ 상품명과 해당 상품 구매자의 키 출력 (회원 없을 경우 NULL)
SELECT b.prodName, u.height
FROM userTbl u
RIGHT JOIN buyTbl b ON u.userID = b.userID;

-- ④ 구매 테이블 기준으로 회원의 지역 정보 확인 (없는 경우 NULL)
SELECT b.prodName, b.amount, u.addr
FROM userTbl u
RIGHT JOIN buyTbl b ON u.userID = b.userID;

-- ⑤ 구매 테이블 기준으로 회원가입일 확인 (없는 경우 NULL)
SELECT b.prodName, b.price, u.mDate
FROM userTbl u
RIGHT JOIN buyTbl b ON u.userID = b.userID;


-------------------------------------------------------------------------------------------
FULL OUTER JOIN 예제
-------------------------------------------------------------------------------------------
- ① 모든 학생과 모든 시험 정보 출력 (누락 정보는 NULL)
SELECT s.name AS 학생이름, e.subject AS 과목, e.score
FROM studentTbl s
FULL OUTER JOIN examTbl e ON s.studentID = e.studentID;

-- ② 시험을 응시하지 않은 학생 찾기
SELECT s.name
FROM studentTbl s
FULL OUTER JOIN examTbl e ON s.studentID = e.studentID
WHERE e.studentID IS NULL;

-- ③ 존재하지 않는 학생ID로 응시한 시험 기록 조회
SELECT e.examID, e.subject, e.score
FROM studentTbl s
FULL OUTER JOIN examTbl e ON s.studentID = e.studentID
WHERE s.studentID IS NULL;

-- ④ 학생과 시험 정보를 묶어 성적 없는 학생과 학생 없는 시험 모두 보기
SELECT s.studentID, s.name, e.subject, e.score
FROM studentTbl s
FULL OUTER JOIN examTbl e ON s.studentID = e.studentID;

-- ⑤ 학생 이름과 시험 과목/점수 함께 출력 (시험 기록 없으면 NULL)
SELECT s.name, e.subject, e.score
FROM studentTbl s
FULL OUTER JOIN examTbl e ON s.studentID = e.studentID;


-------------------------------------------------------------------------------------------
FULL OUTER JOIN 데이터
-------------------------------------------------------------------------------------------

-- 학생 테이블
CREATE TABLE studentTbl (
  studentID CHAR(5) PRIMARY KEY,
  name VARCHAR2(20)
);

-- 시험 응시 테이블
CREATE TABLE examTbl (
  examID CHAR(5) PRIMARY KEY,
  studentID CHAR(5),
  subject VARCHAR2(20),
  score NUMBER
);

-- 학생 데이터 삽입
INSERT INTO studentTbl VALUES ('S001', '홍길동');
INSERT INTO studentTbl VALUES ('S002', '김철수');
INSERT INTO studentTbl VALUES ('S003', '이영희');
INSERT INTO studentTbl VALUES ('S004', '박지민');

-- 시험 응시 데이터 삽입
INSERT INTO examTbl VALUES ('E101', 'S001', '수학', 85);
INSERT INTO examTbl VALUES ('E102', 'S002', '영어', 90);
INSERT INTO examTbl VALUES ('E103', 'S005', '국어', 88); -- 존재하지 않는 학생

COMMIT;


-------------------------------------------------------------------------------------------
CROSS JOIN
-------------------------------------------------------------------------------------------

-- ① 모든 회원(userTbl)과 모든 상품명(prodName)의 조합 출력
SELECT u.userID, u.name, b.prodName
FROM userTbl u
CROSS JOIN (
    SELECT DISTINCT prodName FROM buyTbl
) b;

-- ② 지역별(userTbl.addr)로 상품 분류(groupName)와 조합 만들기
SELECT DISTINCT u.addr, b.groupName
FROM userTbl u
CROSS JOIN (
    SELECT DISTINCT groupName FROM buyTbl WHERE groupName IS NOT NULL
) b;

-- ③ 모든 회원과 특정 월 리스트(가상 테이블) 조합 (월별 리포트용)
SELECT u.userID, u.name, m.month
FROM userTbl u
CROSS JOIN (
    SELECT '1월' AS month FROM dual UNION
    SELECT '2월' FROM dual UNION
    SELECT '3월' FROM dual
) m;

-- ④ 상품명과 수량(1~3)의 모든 조합 생성 (시뮬레이션용)
SELECT p.prodName, qty.q
FROM (
    SELECT DISTINCT prodName FROM buyTbl
) p
CROSS JOIN (
    SELECT 1 AS q FROM dual UNION
    SELECT 2 FROM dual UNION
    SELECT 3 FROM dual
) qty;

-- ⑤ 회원과 가상의 등급 리스트(일반, VIP) 조합
SELECT u.name, g.grade
FROM userTbl u
CROSS JOIN (
    SELECT '일반' AS grade FROM dual UNION
    SELECT 'VIP' FROM dual
) g;



-------------------------------------------------------------------------------------------
SELF JOIN 데이터
-------------------------------------------------------------------------------------------

CREATE TABLE userSelfTestTbl (
    userID      VARCHAR2(10) PRIMARY KEY,
    name        VARCHAR2(50),
    birthYear   NUMBER(4),
    addr        VARCHAR2(100),
    mobile1     VARCHAR2(10),
    mobile2     VARCHAR2(20),
    height      NUMBER(3),
    mDate       DATE,
    managerID   VARCHAR2(10)  -- 자기 참조용 관리자 ID
);


--------------------------------------------------------------------------------------------
시험 test 쿼리문
--------------------------------------------------------------------------------------------

-- Oracle-compatible SQL script (converted from MySQL Forward Engineering)

-- Member_Tbl
CREATE TABLE Member_Tbl (
  Member_id NUMBER PRIMARY KEY,
  Member_name VARCHAR2(45),
  Member_identity VARCHAR2(45),
  Member_grade VARCHAR2(45),
  Member_addr VARCHAR2(45),
  Member_phone VARCHAR2(45)
);

-- Classification_Tbl
CREATE TABLE Classification_Tbl (
  Classification_Id NUMBER PRIMARY KEY,
  Classification_name VARCHAR2(45)
);

-- Book_Tbl
CREATE TABLE Book_Tbl (
  Book_code NUMBER PRIMARY KEY,
  Classification_Id NUMBER NOT NULL,
  book_author VARCHAR2(45),
  book_name VARCHAR2(45),
  publisher VARCHAR2(45),
  isreserve NUMBER(1),
  CONSTRAINT fk_Book_Classification FOREIGN KEY (Classification_Id)
    REFERENCES Classification_Tbl (Classification_Id)
);

-- Rental_Tbl
CREATE TABLE Rental_Tbl (
  Rental_id NUMBER PRIMARY KEY,
  Book_code NUMBER NOT NULL,
  Member_id NUMBER NOT NULL,
  CONSTRAINT fk_Rental_Member FOREIGN KEY (Member_id)
    REFERENCES Member_Tbl (Member_id),
  CONSTRAINT fk_Rental_Book FOREIGN KEY (Book_code)
    REFERENCES Book_Tbl (Book_code)
);

-- Reserve_Tbl
CREATE TABLE Reserve_Tbl (
  Rental_id NUMBER NOT NULL,
  Member_Id NUMBER NOT NULL,
  Reserve_order VARCHAR2(45) NOT NULL,
  PRIMARY KEY (Rental_id, Member_Id),
  CONSTRAINT fk_Reserve_Member FOREIGN KEY (Member_Id)
    REFERENCES Member_Tbl (Member_id),
  CONSTRAINT fk_Reserve_Rental FOREIGN KEY (Rental_id)
    REFERENCES Rental_Tbl (Rental_id)
);

-- Appendix_Tbl
CREATE TABLE Appendix_Tbl (
  Appendix_id NUMBER PRIMARY KEY,
  Book_code NUMBER NOT NULL,
  Appendix_name VARCHAR2(45),
  CONSTRAINT fk_Appendix_Book FOREIGN KEY (Book_code)
    REFERENCES Book_Tbl (Book_code)
);


----------------------------------------------------------------------------------------------------------------------------
INSERT INTO userTbl VALUES ('LSG', '이승기', 1987, '서울', '011', '1111111', 182, TO_DATE('08/08/08', 'RR/MM/DD'), 'JYP');
INSERT INTO userTbl VALUES ('KBS', '김범수', 1979, '경남', '011', '2222222', 173, TO_DATE('12/04/04', 'RR/MM/DD'), 'JYP');
INSERT INTO userTbl VALUES ('KKH', '김경호', 1971, '전남', '019', '3333333', 177, TO_DATE('07/07/07', 'RR/MM/DD'), 'LJB');
INSERT INTO userTbl VALUES ('JYP', '조용필', 1950, '경기', '011', '4444444', 166, TO_DATE('09/04/04', 'RR/MM/DD'), NULL); -- 최고 관리자
INSERT INTO userTbl VALUES ('SSK', '성시경', 1979, '서울', NULL, NULL, 186, TO_DATE('13/12/12', 'RR/MM/DD'), 'LSG');
INSERT INTO userTbl VALUES ('LJB', '임재범', 1963, '서울', '016', '6666666', 182, TO_DATE('09/09/09', 'RR/MM/DD'), 'JYP');
INSERT INTO userTbl VALUES ('YJS', '윤종신', 1969, '경남', NULL, NULL, 170, TO_DATE('05/05/05', 'RR/MM/DD'), 'KBS');
INSERT INTO userTbl VALUES ('EJW', '은지원', 1972, '경북', '011', '8888888', 174, TO_DATE('14/03/03', 'RR/MM/DD'), 'LSG');
INSERT INTO userTbl VALUES ('JKW', '조관우', 1965, '경기', '018', '9999999', 172, TO_DATE('10/10/10', 'RR/MM/DD'), 'KKH');

